(*******************************************************************************
* Copyright (c) 2015 IBM Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************)

class Loader usingPlatform: platform = Value (
  | private platform = platform. |
) (
  public class Loader new: loadUtil settings: settings = (
    | loaderSettings 
      settings = settings.
      loadUtil = loadUtil.
      DATABASE_PARALLELISM = 5.
      nowAtMidnight
      customers = Vector new.
      airportCodeMappings = Vector new.
      flightSegments = Vector new.
      flights = Vector new.
    |
      (*loaderSettings:: JSON.parse(fs.readFileSync('./loader/loader-settings.json', 'utf8'))*)
      (*nowatmignifht:: getDateAtTwelveAM(new Date());*)

      (*make parallelism actors and have them insert the data*)

      (*
      var customerQueue = async.queue(insertCustomer, DATABASE_PARALLELISM);
      customerQueue.drain = function() {
        logger.info('all customers loaded');
        airportCodeMappingQueue.push(airportCodeMappings);
      }
      
      var airportCodeMappingQueue = async.queue(insertAirportCodeMapping, DATABASE_PARALLELISM);
      airportCodeMappingQueue.drain = function() {
        logger.info('all airportMappings loaded');
        flightSegmentsQueue.push(flightSegments);
      }
      
      var flightSegmentsQueue = async.queue(insertFlightSegment, DATABASE_PARALLELISM);
      flightSegmentsQueue.drain = function() {
        logger.info('all flightSegments loaded');
        flightQueue.push(flights);
      }

      var flightQueue = async.queue(insertFlight, DATABASE_PARALLELISM);
      
      *)
  ) (

    class Customer new: id = (
      |
        _id ::= id.
        password ::= 'password'.
        status ::= 'GOLD'.
        total_miles ::= 1000000.
        miles_ytd ::= 1000.
        address ::= objL(
          |
            streetAddress1 ::= '123 Main St.'.
            city ::= 'Anytown'.
            stateProvince ::= 'NC'.
            country ::= 'USA'.
            postalCode ::= '27617'.
          |
        )().
        phoneNumber ::= '919-123-4567'.
        phoneNumberType ::= 'BUSINESS'.
      |
    )()

    class AirportCodeMapping from: id to: name = (
      |
        _id ::= id.
        airportName ::= name.
      |
    )()

    class FlightSegment new: id from: origin to: destination with: miles = (
      |
        _id ::= id.
        originPort ::= origin.
        destPort ::= destination.
        miles ::= miles.
      |
    )()

    class Flight new: id segment: segment departure: departure arrival: arrival = (
      |
        _id ::= id.
        flightSegmentId ::= segment.
        scheduledDepartureTime ::= departure.
        scheduledArrivalTime ::= arrival.
        firstClassBaseCost ::= 500.
        economyClassBaseCost ::= 200.
        numFirstClassSeats ::= 10.
        numEconomyClassSeats ::= 200.
        airplaneTypeId ::= 'B747'.
      |
    )()

    getDepartureTime: days from: date = (
      | milliseconds |
      milliseconds:: days * 24 * 60  * 60  * 1000.
      (*return new Date(baseTime.getTime() + milliseconds).
      *)
    )

    getArrivalTime: departureTime mileage: mileage = (
      | averageSpeed hours milliseconds |
      averageSpeed:: 600.0. (* 600 miles/hours *)
      hours:: (mileage / averageSpeed). (* miles / miles/hour = hours *)
      milliseconds:: hours * 60 * 60 * 1000.
      (*return new Date(departureTime.getTime() + milliseconds);
      *)
    ) 

    getDateAtTwelveAM: theDate = (
      (*return new Date(theDate.getFullYear(), theDate.getMonth(), theDate.getDate(), 0, 0, 0, 0);*) 
    )

    getDateAtRandomTopOfTheHour: theDate = (
      (*
      randomHour = Math.floor((Math.random()*23));
      return new Date(theDate.getFullYear(), theDate.getMonth(), theDate.getDate(), randomHour, 0, 0, 0);
      *)
    )

    insertCustomer: customer callback: callback = (
      (*
      logger.debug('customer to insert = ' + JSON.stringify(customer));
      loadUtil.insertOne(#n_customer, customer, function(error, customerInserted) {
        logger.debug('customer inserted = ' + JSON.stringify(customerInserted));
        callback();
      });
      *)
    )

    insertAirportCodeMapping: airportCodeMapping callback: callback = (
      (*
      loadUtil.insertOne(#n_airportCodeMapping, airportCodeMapping, function(error, airportCodeMappingInserted) {
        logger.debug('airportCodeMapping inserted = ' + JSON.stringify(airportCodeMappingInserted));
        callback();
      });
      *)
    )

    insertFlightSegment: flightSegment callback: callback = (
      (*
      loadUtil.insertOne(#n_flightSegment, flightSegment, function(error, flightSegmentInserted) {
        logger.debug('flightSegment inserted = ' + JSON.stringify(flightSegmentInserted));
        callback();
      });
      *)
    )

    insertFlight: flight callback: callback = (
      (*
      loadUtil.insertOne(#n_flight, flight, function(error, flightInserted) {
        logger.debug('flight inserted = ' + JSON.stringify(flightInserted));
        callback();
      });
      *)
    )

    public startLoadDatabase: req res: res = (
      (*
      if (customers.length>=1)
          {
        res.send('Already loaded');
        return;
          }
      var numCustomers = req.query.numCustomers;
      if(numCustomers === undefined) {
        numCustomers = loaderSettings.MAX_CUSTOMERS;
      }
      logger.info('starting loading database');
        createCustomers(numCustomers);
        createFlightRelatedData(function() {
          logger.info('number of customers = ' + customers.length);
          logger.info('number of airportCodeMappings = ' + airportCodeMappings.length);
          logger.info('number of flightSegments = ' + flightSegments.length);
          logger.info('number of flights = ' + flights.length);
          flightQueue.drain = function() {
            logger.info('all flights loaded');
            logger.info('ending loading database');
            res.send('Database Finished Loading');
          };
          customerQueue.push(customers);
        });
      //res.send('Trigger DB loading');
      *)
    )

    public getNumConfiguredCustomers = (
      ^ [ :req :res |
        res contentType: 'text/plain'.
        res send: (loaderSettings MAX_CUSTOMERS toString). 
      ]
    )

    createCustomers: numCustomers = (
      0 to: (numCustomers - 1) do: [ :ii | | customer |
        customer:: Customer new: ('uid' + ii + '@email.com').
        customers append: customer.
      ]
    )

    createFlightRelatedData: callback = (
      | rows airportCodeMapping flightSegmentId|
      rows:: Vector new.

      rows:: parseCSV: './loader/mileage.csv'.
      
      (*) logger.debug('Number of lines: ' + count);
      logger.debug('rows.length = ' + rows.length);
      logger.debug('rows = ' + rows);*)
      1 to: ((rows at: 1) length) do: [ :ii |
        airportCodeMapping:: AirportCodeMapping from: ((rows at: 2) at: ii) to: ((rows at: 1) at: ii).
        airportCodeMappings append: (airportCodeMapping).
      ].
      
      flightSegmentId:: 0.

      (* actual mileages start on the third row*)
      3 to: (rows length) do: [ :ii |
        | fromAirportCode |
        fromAirportCode:: ((rows at: ii) at: 2).
        (*) format of the row is "long airport name name" (0), "airport code" (1), mileage to first airport in rows 0/1 (2), mileage to second airport in rows 0/1 (3), ... mileage to last airport in rows 0/1 (length)*)
        3 to: ((rows at: ii) length) do: [ :jj |
          | toAirportCode flightSegment mileage |
          toAirportCode:: ((rows at: 2) at: (jj - 3)).
          mileage:: ((rows at: ii) at: jj).
          mileage = 'NA' ifFalse: [
            flightSegment:: FlightSegment new: ('AA' + flightSegmentId) from: fromAirportCode to: toAirportCode with: mileage.
            flightSegmentId:: flightSegmentId + 1.
            flightSegments append: flightSegment.
            
            0 to: (loaderSettings MAX_DAYS_TO_SCHEDULE_FLIGHTS) do: [ :kk |
              0 to: (loaderSettings MAX_FLIGHTS_PER_DAY) do: [ :ll |
                | flight |
                flight:: Flight new: (uuid v4) segment: (flightSegment _id) departure: (getDepartureTime: kk from: nowAtMidnight) arrival: (getArrivalTime: (flight scheduledDepartureTime) mileage: mileage))
                flights push: flight;
              ]
            ]
          ]
        ].
      ].
      callback value.
    )

    public parseCSV: filepath <String> ^ <Vector[Vector[String]]> = (
      | path cis rows line |
      path:: (Files FilePath for: filepath).
      cis:: path charInputStream.
      rows:: (Vector new: 10).

      [ cis atEnd ] whileFalse: [
        rows append: ((cis upTo: '\n') split: ',').
      ].
      cis close.
      ^ rows.
    )
  )
)