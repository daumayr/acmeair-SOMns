(*******************************************************************************
* Copyright (c) 2015 IBM Corp.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************)

class AuthService usingPlatform: platform settings: settings = Value (
	|
		http = platform http.
		settigns = settings.
		contextRoot = settings authContextRoot || '/acmeair-auth-service/rest/api'.
		location = process env AUTH_SERVICE.
		hostAndPort = location split: ':'.
	|
)(
	public createSession: userid callback: callback = (
		| path options request |
		path:: contextRoot+'/authtoken/byuserid/' + userid.
		(*options:: {
			hostname: hostAndPort[0],
		 	port: hostAndPort[1] || 80,
				path: path,
				method: "POST",
				headers: {
							'Content-Type': 'application/json'
				}
			}*)

		(*logger.debug('createSession  options:'+JSON.stringify(options));*)
		request:: http request: options callback: [ :response |
			| data jsonData |
			data:: ''.
			response setEncoding: 'utf8'.
			response on:'data' do: [ :chunk |
				data: data + chunk.
			].

			response on: 'end' do: [
				(response statusCode >= 400) ifTrue: [
					callback value: 'StatusCode:'+ response.statusCode+',Body:'+data with: nil.
				] ifFalse: [
					jsonData:: JSON parse: data.
					jsonData _id ifTrue: [
						callback value: nil with: jsonData _id.
					] ifFalse: [
						callback value: nil with: jsonData id.
					]
				]
			]
		].

		request on: 'error' do: [ :e |
			callback value: 'problem with request: ' + e.message with: nil.
		].

		request end.
	)

	public validateSession: sessionid callback: callback = (
		| path options request |
		path:: contextRoot + '/authtoken/' + sessionid.
	    (*options:: {
			hostname: hostAndPort[0],
		 	port: hostAndPort[1],
		    	path: path,
		    	method: "GET",
		    	headers: {
		    	      'Content-Type': 'application/json'
		    	}
	    }*)

		(*logger.debug('validateSession request:'+JSON.stringify(options));*)

		request:: http request: options callback:[ :response|
			| data |
			data::''.
			response setEncoding: 'utf8'.
			response on: 'data' callback: [ :chunk |
				data:: data + chunk.
			].
			response on: 'end' callback: [
				(response statusCode >= 400) ifTrue: [
					callback value: 'StatusCode:'+ response.statusCode+',Body:'+data with: nil.
				] ifFalse: [
					callback value: nil with: (JSON parse: data) customerid.
				]
			]		
		].
		request on: 'error' callback: [ :e |
			callback value: 'problem with request: ' + (e message) with: nil.
		].
		request end.
	)

	public invalidateSession: sessionid callback: callback = (
		| path options request |
		path:: contextRoot+'/authtoken/' + sessionid.
	     (*options = {
			hostname: hostAndPort[0],
		 	port: hostAndPort[1],
		    	path: path,
		    	method: "DELETE",
		    	headers: {
		    	      'Content-Type': 'application/json'
		    	}
	     }*)
	     (*logger.debug('invalidateSession request:'+JSON.stringify(options));*)
		request = http request: options callback: [ :response |
			| data |
		  data:: ''.
			response setEncoding: 'utf8'.
			response on: 'data' callback: [ :chunk |
				data:: data + chunk.
			].
			response on: 'end' callback: [
				(response statusCode >= 400) ifTrue: [
					callback value: 'StatusCode:' + response statusCode + ',Body:' + data.
				] ifFalse: [
					callback value: nil.
				]
			]
		].
	 	request on: 'error' callback: [ :e |
			callback value: 'problem with request: ' + e message with: nil.
		].
		request end.
	)
)