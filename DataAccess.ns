(*******************************************************************************
* Copyright (c) 2015 IBM Corp.
* Copyright (c) 2018 Dominik Aumayr
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************)

class DataAccess usingPlatform: platform andJSON: JSON andLoader: Loader = Value (
	|
		Derby = platform derby.
		JSON = JSON.
		Dictionary = platform collections Dictionary.
		Vector = platform kernel Vector.
		Loader = Loader.
	|
) (
  public class DataAccess = (
    |
      dbclient
			public insertStmt = Dictionary new: 6.
			public updateStmt = Dictionary new: 6.
			public findByIdStmt = Dictionary new: 3.
			public contentCol = Dictionary new: 6.
			public classMap = Dictionary new: 6.
    |
  )(

    public initializeDatabaseConnections: clear callback: callback = (
			Derby start.
			dbclient:: Derby connect: 'acmeair'.
			callback value: nil.
			(* TODO error handling for connection
			logger.info('Connected.');
			*)

			clear ifTrue:[
				prepareDB.
			].

			insertStmt at: #n_customer put: (dbclient <-: prepareStatement:'INSERT INTO n_customer (id,content) values (?, ?)').
			insertStmt at: #n_customerSession put: (dbclient <-: prepareStatement: 'INSERT INTO n_customerSession (id,content) values (?, ?)').
			insertStmt at: #n_booking put: (dbclient <-: prepareStatement: 'INSERT INTO n_booking (customerId,id,content) values (?, ?, ?)').
			insertStmt at: #n_flight put: (dbclient <-: prepareStatement: 'INSERT INTO n_flight (flightSegmentId,scheduledDepartureTime,id,content) values (?, ?, ?, ?)').
			insertStmt at: #n_flightSegment put: (dbclient <-: prepareStatement: 'INSERT INTO n_flightSegment (originPort,destPort,id,content) values (?, ?, ?,?)').
			insertStmt at: #n_airportCodeMapping put: (dbclient <-: prepareStatement: 'INSERT INTO n_airportCodeMapping (id,content) values (?, ?)').

			updateStmt at: #n_customer put: (dbclient <-: prepareStatement:'UPDATE n_customer SET content = ? WHERE id=?').
			updateStmt at: #n_customerSession put: (dbclient <-: prepareStatement: 'UPDATE n_customerSession SET content = ? WHERE id=?').
			updateStmt at: #n_booking put: (dbclient <-: prepareStatement: 'UPDATE n_booking SET content = ? WHERE customerId = ? AND id=?').
			updateStmt at: #n_flight put: (dbclient <-: prepareStatement: 'UPDATE n_flight SET content = ? WHERE flightSegmentId = ? AND scheduledDepartureTime = ? AND id=?').
			updateStmt at: #n_flightSegment put: (dbclient <-: prepareStatement: 'UPDATE n_flightSegment SET content = ? WHERE originPort = ? AND destPort = ? AND id=?').
			updateStmt at: #n_airportCodeMapping put: (dbclient <-: prepareStatement: 'UPDATE n_airportCodeMapping SET content = ? WHERE id=?').

			findByIdStmt at: #n_customer put: (dbclient <-: prepareStatement:'SELECT content from n_customer where id=?').
			findByIdStmt at: #n_customerSession put: (dbclient <-: prepareStatement:'SELECT content from n_customerSession where id=?').
			findByIdStmt at: #n_airportCodeMapping put: (dbclient <-: prepareStatement:'SELECT content from n_airportCodeMapping where id=?').

			classMap at: #n_customer put: Loader Customer.
			classMap at: #n_customerSession put: Loader Session.
			classMap at: #n_booking put: Loader Booking.
			classMap at: #n_flight put: Loader Flight.
			classMap at: #n_flightSegment put: Loader FlightSegment.
			classMap at: #n_airportCodeMapping put: Loader AirportCodeMapping.
    )

		private prepareDB = (

			(*TODO cleanup*)
			dbclient <-: execute: 'DROP TABLE n_airportcodemapping' callback: [ :res |] ifFail: [ :sym :msg |].
      dbclient <-: execute: 'DROP TABLE n_booking' callback: [ :res |] ifFail: [ :sym :msg |].
      dbclient <-: execute: 'DROP TABLE n_customer' callback: [ :res |] ifFail: [ :sym :msg |].
      dbclient <-: execute: 'DROP TABLE n_customersession' callback: [ :res |] ifFail: [ :sym :msg |].
      dbclient <-: execute: 'DROP TABLE n_flight' callback: [ :res |] ifFail: [ :sym :msg |].
      dbclient <-: execute: 'DROP TABLE n_flightsegment' callback: [ :res |] ifFail: [ :sym :msg |].

			(*TODO cleanup*)
			dbclient <-: execute: 'CREATE TABLE n_airportcodemapping(
				id VARCHAR(5000) PRIMARY KEY,
				content VARCHAR(5000)
				)' callback: [ :res | ].

      dbclient <-: execute: 'CREATE TABLE n_booking(
				customerId VARCHAR(5000),
				id VARCHAR(5000),
				content VARCHAR(5000),
				PRIMARY KEY (customerId, id)
				)' callback: [ :res | ].

      dbclient <-: execute: 'CREATE TABLE n_customer(
				id VARCHAR(5000) PRIMARY KEY,
				content VARCHAR(5000)
				)' callback: [ :res | ].

      dbclient <-: execute: 'CREATE TABLE n_customersession(
				id VARCHAR(5000) PRIMARY KEY,
				content VARCHAR(5000)
				)' callback: [ :res | ].

      dbclient <-: execute: 'CREATE TABLE n_flight(
				flightSegmentId VARCHAR(5000),
				scheduledDepartureTime BIGINT,
				id VARCHAR(5000),
				content VARCHAR(5000),
				PRIMARY KEY (flightSegmentId,scheduledDepartureTime,id)
				)' callback: [ :res | ].

      dbclient <-: execute: 'CREATE TABLE n_flightsegment(
				originPort VARCHAR(5000),
				destPort VARCHAR(5000),
				id VARCHAR(5000),
				content VARCHAR(5000),
				PRIMARY KEY (originPort,destPort,id)
				)' callback: [ :res | ].
		)

    public insertOne: collectionname doc: doc callback: callback = (
			(insertStmt at: collectionname) <-: execute: (getInsertParam: collectionname doc: doc) callback: [ :result |
				callback value: result.
			]
    )

    public findOne: collectionname key: key callback: callback = (
			| query |
      query:: findByIdStmt at: collectionname.
			query ifNil: [
				(*TODO error*)
				callback value: ('FindById not supported on '+collectionname) .
				^ self.
			].

			query <-: execute: { key } callback: [ :result |
				result size = 0 ifTrue: [
					callback value: nil.
				] ifFalse: [
					callback value: ((classMap at: collectionname) fromJSON: ((result at: 1) at: 1))
				]
			]
    )

    public update: collectionname doc: doc callback: callback = (
			(updateStmt at: collectionname) <-: execute: (getUpdateParam: collectionname doc: doc) callback: [ :result |
					callback value: doc.
			]
    )

    public remove: collectionname condition: condition conditionParam: params callback: callback = (
      | query |
				
			query:: 'DELETE from '+collectionname+ ' where '+ condition.
			(*logger.debug("query:"+query +", param:"+ JSON.stringify(info.param))*)
			(dbclient <-: prepareStatement: query) <-: execute: params callback: [ :result |
				callback value.
			]
    )

    public findBy: collectionname condition: condition conditionParam: params callback: callback = (
      | query |
			
			query:: 'SELECT content from '+collectionname+ ' where '+ condition.
			(*logger.debug("query:"+query +", param:"+ JSON.stringify(info.param))*)
			(dbclient <-: prepareStatement: query) <-: execute: params callback: [ :result |
				|docs|
				docs:: Vector new.
				1 to: (result size) do: [ :i |
					(*logger.debug("result["+i +"]="+ JSON.stringify(result.rows[i]));*)
					(*docs append: (JSON JSONParser parse: ((result at: i) at: 1))*)
					docs append: ((classMap at: collectionname) fromJSON: ((result at: i) at: 1))
				].
				callback value: docs.
			] 
    )

    public count: collectionname condition: condition callback: callback = (
			| query |
			query:: 'SELECT COUNT(*) from '+collectionname+ ' where '+ condition.
			dbclient <-: execute: query callback: [ :count |
				callback value: count.
			]
    )

    getInsertParam: collectionname doc: doc = (
			collectionname = #n_booking ifTrue: [
				^ {doc customerid . doc _id . (doc toJSON)}
			].

			collectionname = #n_flight ifTrue: [
				^ {doc flightSegmentId . doc scheduledDepartureTime getTime . doc _id . (doc toJSON)}
			].

			collectionname = #n_flightSegment ifTrue: [
				^ {doc originPort . doc destPort . doc _id . (doc toJSON)}
			].
			
			^ { doc _id . (doc toJSON)}
		)

		getUpdateParam: collectionname doc: doc = (
			collectionname = #n_booking ifTrue: [
				^ {(doc toJSON) . doc customerid . doc _id}
			].

			collectionname = #n_flight ifTrue: [
				^ {(doc toJSON) . doc flightSegmentId . doc scheduledDepartureTime getTime . doc _id }
			].

			collectionname = #n_flightSegment ifTrue: [
				^ {(doc toJSON) . doc originPort . doc destPort . doc _id }
			].
			
			^ {(doc toJSON) . doc _id }
		)
  )
  
)